generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling    
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection   
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  goals         Goal[]
  activities    Activity[]
  dailyProgress DailyProgress[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goals Goal[]
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relations
  activities    Activity[]
  dailyProgress DailyProgress[]
}

model Activity {
  id           String    @id @default(uuid())
  title        String
  description  String?
  is_completed Boolean   @default(false)
  completed_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id])
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])
}

model DailyProgress {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Foreign keys
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  goal_id String
  goal    Goal   @relation(fields: [goal_id], references: [id])
}
